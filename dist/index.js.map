{
  "version": 3,
  "sources": ["../lib/is_buffer_uint8array.js", "../lib/main.js", "../lib/polyfill.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar allocUnsafe = require( '@stdlib/buffer-alloc-unsafe' );\nvar isUint8Array = require( '@stdlib/assert-is-uint8array' );\n\n\n// MAIN //\n\n/**\n* Checks whether an environment supports Node.js buffer instances which inherit from `Uint8Array`.\n*\n* @private\n* @returns {boolean} boolean indicating whether an environment supports Node.js buffer instances inheriting from `Uint8Array`\n*\n* @example\n* var bool = check();\n* // returns <boolean>\n*/\nfunction check() {\n\tvar buf = allocUnsafe( 1 );\n\treturn isUint8Array( buf );\n}\n\n\n// EXPORTS //\n\nmodule.exports = check;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert-is-nonnegative-integer' ).isPrimitive;\nvar allocUnsafe = require( '@stdlib/buffer-alloc-unsafe' );\nvar ctors = require( '@stdlib/array-typed-ctors' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar bytesPerElement = require( '@stdlib/ndarray-base-bytes-per-element' );\nvar format = require( '@stdlib/string-format' );\n\n\n// MAIN //\n\n/**\n* Creates an uninitialized array having a specified length.\n*\n* @param {NonNegativeInteger} length - array length\n* @param {string} [dtype=\"float64\"] - data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be a recognized data type\n* @returns {(TypedArray|Array|ComplexArray)} array or typed array\n*\n* @example\n* var arr = empty( 2 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = empty( 2, 'float32' );\n* // returns <Float32Array>\n*/\nfunction empty( length ) {\n\tvar nbytes;\n\tvar offset;\n\tvar dtype;\n\tvar ctor;\n\tvar buf;\n\tvar out;\n\tvar nb;\n\n\tif ( !isNonNegativeInteger( length ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a nonnegative integer. Value: `%s`.', length ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tdtype = arguments[ 1 ];\n\t} else {\n\t\tdtype = 'float64';\n\t}\n\tif ( dtype === 'generic' ) {\n\t\treturn zeros( length );\n\t}\n\tnbytes = bytesPerElement( dtype );\n\tif ( nbytes === null ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a supported data type. Value: `%s`.', dtype ) );\n\t}\n\t// Resolve typed array constructor:\n\tctor = ctors( dtype );\n\n\t// Compute the number of bytes to allocate:\n\tnb = nbytes * length;\n\tif ( dtype === 'complex128' ) {\n\t\tnb += 8; // Note: need to allocate additional bytes to ensure alignment\n\t}\n\t// Allocate binary buffer:\n\tbuf = allocUnsafe( nb );\n\n\t// Resolve the byte offset:\n\toffset = buf.byteOffset;\n\tif ( dtype === 'complex128' ) {\n\t\tif ( !isNonNegativeInteger( offset/nbytes ) ) {\n\t\t\toffset += 8; // Note: ensure alignment\n\t\t}\n\t}\n\t// Reinterpret the binary buffer:\n\tout = new ctor( buf.buffer, offset, length );\n\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = empty;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar zeros = require( '@stdlib/array-zeros' );\n\n\n// MAIN //\n\n/**\n* Creates an uninitialized array having a specified length.\n*\n* @private\n* @param {NonNegativeInteger} length - array length\n* @param {string} [dtype=\"float64\"] - data type\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be a recognized data type\n* @returns {(TypedArray|Array|ComplexArray)} array or typed array\n*\n* @example\n* var arr = empty( 2 );\n* // returns <Float64Array>\n*\n* @example\n* var arr = empty( 2, 'float32' );\n* // returns <Float32Array>\n*/\nfunction empty( length ) {\n\tif ( arguments.length > 1 ) {\n\t\treturn zeros( length, arguments[ 1 ] );\n\t}\n\treturn zeros( length );\n}\n\n\n// EXPORTS //\n\nmodule.exports = empty;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an uninitialized array having a specified length.\n*\n* @module @stdlib/array-empty\n*\n* @example\n* var empty = require( '@stdlib/array-empty' );\n*\n* var arr = empty( 2 );\n* // returns <Float64Array>\n*\n* @example\n* var empty = require( '@stdlib/array-empty' );\n*\n* var arr = empty( 2, 'float32' );\n* // returns <Float32Array>\n*/\n\n// MODULES //\n\nvar isBufferUint8Array = require( './is_buffer_uint8array.js' );\nvar main = require( './main.js' );\nvar polyfill = require( './polyfill.js' );\n\n\n// MAIN //\n\nvar empty;\nif ( isBufferUint8Array() ) {\n\tempty = main;\n} else {\n\tempty = polyfill;\n}\n\n\n// EXPORTS //\n\nmodule.exports = empty;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,6BAA8B,EACrDC,EAAe,QAAS,8BAA+B,EAe3D,SAASC,GAAQ,CAChB,IAAIC,EAAMH,EAAa,CAAE,EACzB,OAAOC,EAAcE,CAAI,CAC1B,CAKAJ,EAAO,QAAUG,IC9CjB,IAAAE,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAuB,QAAS,uCAAwC,EAAE,YAC1EC,EAAc,QAAS,6BAA8B,EACrDC,EAAQ,QAAS,2BAA4B,EAC7CC,EAAQ,QAAS,0BAA2B,EAC5CC,EAAkB,QAAS,wCAAyC,EACpEC,EAAS,QAAS,uBAAwB,EAsB9C,SAASC,EAAOC,EAAS,CACxB,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAK,CAACd,EAAsBO,CAAO,EAClC,MAAM,IAAI,UAAWF,EAAQ,+EAAgFE,CAAO,CAAE,EAOvH,GALK,UAAU,OAAS,EACvBG,EAAQ,UAAW,CAAE,EAErBA,EAAQ,UAEJA,IAAU,UACd,OAAOP,EAAOI,CAAO,EAGtB,GADAC,EAASJ,EAAiBM,CAAM,EAC3BF,IAAW,KACf,MAAM,IAAI,UAAWH,EAAQ,gFAAiFK,CAAM,CAAE,EAGvH,OAAAC,EAAOT,EAAOQ,CAAM,EAGpBI,EAAKN,EAASD,EACTG,IAAU,eACdI,GAAM,GAGPF,EAAMX,EAAaa,CAAG,EAGtBL,EAASG,EAAI,WACRF,IAAU,eACRV,EAAsBS,EAAOD,CAAO,IACzCC,GAAU,IAIZI,EAAM,IAAIF,EAAMC,EAAI,OAAQH,EAAQF,CAAO,EAEpCM,CACR,CAKAd,EAAO,QAAUO,ICpGjB,IAAAS,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAQ,QAAS,qBAAsB,EAuB3C,SAASC,EAAOC,EAAS,CACxB,OAAK,UAAU,OAAS,EAChBF,EAAOE,EAAQ,UAAW,CAAE,CAAE,EAE/BF,EAAOE,CAAO,CACtB,CAKAH,EAAO,QAAUE,ICfjB,IAAIE,EAAqB,IACrBC,EAAO,IACPC,EAAW,IAKXC,EACCH,EAAmB,EACvBG,EAAQF,EAERE,EAAQD,EAMT,OAAO,QAAUC",
  "names": ["require_is_buffer_uint8array", "__commonJSMin", "exports", "module", "allocUnsafe", "isUint8Array", "check", "buf", "require_main", "__commonJSMin", "exports", "module", "isNonNegativeInteger", "allocUnsafe", "ctors", "zeros", "bytesPerElement", "format", "empty", "length", "nbytes", "offset", "dtype", "ctor", "buf", "out", "nb", "require_polyfill", "__commonJSMin", "exports", "module", "zeros", "empty", "length", "isBufferUint8Array", "main", "polyfill", "empty"]
}
